/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace PeerLocal {
  export type OfferStruct = {
    owner: PromiseOrValue<string>;
    communityId: PromiseOrValue<BigNumberish>;
    metadata: PromiseOrValue<string>;
    reputationRequirement: PromiseOrValue<BigNumberish>;
    stakingRequirement: PromiseOrValue<BigNumberish>;
    offerStatus: PromiseOrValue<string>;
  };

  export type OfferStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    owner: string;
    communityId: BigNumber;
    metadata: string;
    reputationRequirement: BigNumber;
    stakingRequirement: BigNumber;
    offerStatus: string;
  };
}

export interface PeerLocalInterface extends utils.Interface {
  functions: {
    "acceptOffer(uint256,uint256)": FunctionFragment;
    "communities(uint256)": FunctionFragment;
    "communityMembers(uint256,uint256)": FunctionFragment;
    "createCommunity(string,uint256)": FunctionFragment;
    "createOffer(uint256,string,uint256,uint256)": FunctionFragment;
    "joinCommunity(uint256,bytes)": FunctionFragment;
    "offerStatus(uint256)": FunctionFragment;
    "offers(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reputation(address)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOffer"
      | "communities"
      | "communityMembers"
      | "createCommunity"
      | "createOffer"
      | "joinCommunity"
      | "offerStatus"
      | "offers"
      | "owner"
      | "renounceOwnership"
      | "reputation"
      | "token"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "communities",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "communityMembers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCommunity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCommunity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "offerStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reputation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CommunityCreated(uint256,string,uint256,address)": EventFragment;
    "MemberJoinedCommunity(uint256,address)": EventFragment;
    "OfferAccepted(uint256,uint256,address)": EventFragment;
    "OfferCreated(uint256,uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PeerLocalInitalized(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommunityCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberJoinedCommunity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerLocalInitalized"): EventFragment;
}

export interface CommunityCreatedEventObject {
  communityId: BigNumber;
  ipfsMetadata: string;
  stakingRequirement: BigNumber;
  owner: string;
}
export type CommunityCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  CommunityCreatedEventObject
>;

export type CommunityCreatedEventFilter =
  TypedEventFilter<CommunityCreatedEvent>;

export interface MemberJoinedCommunityEventObject {
  communityId: BigNumber;
  member: string;
}
export type MemberJoinedCommunityEvent = TypedEvent<
  [BigNumber, string],
  MemberJoinedCommunityEventObject
>;

export type MemberJoinedCommunityEventFilter =
  TypedEventFilter<MemberJoinedCommunityEvent>;

export interface OfferAcceptedEventObject {
  communityId: BigNumber;
  offerId: BigNumber;
  member: string;
}
export type OfferAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferCreatedEventObject {
  communityId: BigNumber;
  offerId: BigNumber;
  newOffer: PeerLocal.OfferStructOutput;
}
export type OfferCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, PeerLocal.OfferStructOutput],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PeerLocalInitalizedEventObject {
  erc20: string;
}
export type PeerLocalInitalizedEvent = TypedEvent<
  [string],
  PeerLocalInitalizedEventObject
>;

export type PeerLocalInitalizedEventFilter =
  TypedEventFilter<PeerLocalInitalizedEvent>;

export interface PeerLocal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PeerLocalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOffer(
      communityId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    communities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        ipfsMetadata: string;
        stakingRequirement: BigNumber;
        owner: string;
      }
    >;

    communityMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createCommunity(
      ipfsMetadata: PromiseOrValue<string>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      communityId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      reputationRequirement: PromiseOrValue<BigNumberish>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinCommunity(
      communityId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offerStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber, string] & {
        owner: string;
        communityId: BigNumber;
        metadata: string;
        reputationRequirement: BigNumber;
        stakingRequirement: BigNumber;
        offerStatus: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reputation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    communityId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  communities(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      ipfsMetadata: string;
      stakingRequirement: BigNumber;
      owner: string;
    }
  >;

  communityMembers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createCommunity(
    ipfsMetadata: PromiseOrValue<string>,
    stakingRequirement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    communityId: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<string>,
    reputationRequirement: PromiseOrValue<BigNumberish>,
    stakingRequirement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinCommunity(
    communityId: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offerStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  offers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber, string] & {
      owner: string;
      communityId: BigNumber;
      metadata: string;
      reputationRequirement: BigNumber;
      stakingRequirement: BigNumber;
      offerStatus: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reputation(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      communityId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    communities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        ipfsMetadata: string;
        stakingRequirement: BigNumber;
        owner: string;
      }
    >;

    communityMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createCommunity(
      ipfsMetadata: PromiseOrValue<string>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      communityId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      reputationRequirement: PromiseOrValue<BigNumberish>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    joinCommunity(
      communityId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    offerStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber, string] & {
        owner: string;
        communityId: BigNumber;
        metadata: string;
        reputationRequirement: BigNumber;
        stakingRequirement: BigNumber;
        offerStatus: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reputation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CommunityCreated(uint256,string,uint256,address)"(
      communityId?: PromiseOrValue<BigNumberish> | null,
      ipfsMetadata?: null,
      stakingRequirement?: null,
      owner?: PromiseOrValue<string> | null
    ): CommunityCreatedEventFilter;
    CommunityCreated(
      communityId?: PromiseOrValue<BigNumberish> | null,
      ipfsMetadata?: null,
      stakingRequirement?: null,
      owner?: PromiseOrValue<string> | null
    ): CommunityCreatedEventFilter;

    "MemberJoinedCommunity(uint256,address)"(
      communityId?: PromiseOrValue<BigNumberish> | null,
      member?: PromiseOrValue<string> | null
    ): MemberJoinedCommunityEventFilter;
    MemberJoinedCommunity(
      communityId?: PromiseOrValue<BigNumberish> | null,
      member?: PromiseOrValue<string> | null
    ): MemberJoinedCommunityEventFilter;

    "OfferAccepted(uint256,uint256,address)"(
      communityId?: PromiseOrValue<BigNumberish> | null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      member?: PromiseOrValue<string> | null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      communityId?: PromiseOrValue<BigNumberish> | null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      member?: PromiseOrValue<string> | null
    ): OfferAcceptedEventFilter;

    "OfferCreated(uint256,uint256,tuple)"(
      communityId?: PromiseOrValue<BigNumberish> | null,
      offerId?: null,
      newOffer?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      communityId?: PromiseOrValue<BigNumberish> | null,
      offerId?: null,
      newOffer?: null
    ): OfferCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PeerLocalInitalized(address)"(
      erc20?: PromiseOrValue<string> | null
    ): PeerLocalInitalizedEventFilter;
    PeerLocalInitalized(
      erc20?: PromiseOrValue<string> | null
    ): PeerLocalInitalizedEventFilter;
  };

  estimateGas: {
    acceptOffer(
      communityId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    communities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCommunity(
      ipfsMetadata: PromiseOrValue<string>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      communityId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      reputationRequirement: PromiseOrValue<BigNumberish>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinCommunity(
      communityId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offerStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reputation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      communityId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    communities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCommunity(
      ipfsMetadata: PromiseOrValue<string>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      communityId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      reputationRequirement: PromiseOrValue<BigNumberish>,
      stakingRequirement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinCommunity(
      communityId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offerStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reputation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
